/*
 * Copyright (c) 2018-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "dt-bindings/clock/tegra194-clock.h"
#define CAM0_PWDN	TEGRA194_MAIN_GPIO(P, 4)
#define CAM1_PWDN	TEGRA194_MAIN_GPIO(P, 5)
#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)

/*
 * EAC-2000 (Navier NX)
 * PCA9543APWR*1
 * MAX9296*2
 */

/* The lanes number of CSI-A of MAX9296 */
#define CAM_LANES 4

/ {
	gpio@2200000 {
		/* CAM0_PWDN Power */
		camera-control-0_output-high {
			status = "okay";
			gpio-hog;
			gpios = <CAM0_PWDN 0>;
			output-high;
			label = "cam0-pwdn";
		};
		/* CAM1_PWDN Power */
		camera-control-1_output-high {
			status = "okay";
			gpio-hog;
			gpios = <CAM1_PWDN 0>;
			output-high;
			label = "cam1-pwdn";
		};
	};
     
	capture_vi_base: tegra-capture-vi  {
		num-channels = <4>; /* total cameras of EAC-2000 */
		#address-cells = <1>;
		#size-cells = <0>;
		status = "okay";

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;
				status = "okay";
				imx390_vi_in0: endpoint {
					status = "okay";
					vc-id = <0>;
					port-index = <0>;
					bus-width = <CAM_LANES>;
					remote-endpoint = <&imx390_csi_out0>;
				};
			};
			port@1 {
				reg = <1>;
				status = "okay";
				imx390_vi_in1: endpoint {
					status = "okay";
					vc-id = <1>;
					port-index = <0>;
					bus-width = <CAM_LANES>;
					remote-endpoint = <&imx390_csi_out1>;
				};
			};
			port@2 {
				reg = <2>;
				status = "okay";
				imx390_vi_in2: endpoint {
					status = "okay";
					vc-id = <0>;
					port-index = <2>;
					bus-width = <CAM_LANES>;
					remote-endpoint = <&imx390_csi_out2>;
				};
			};
			port@3 {
				reg = <3>;
				status = "okay";
				imx390_vi_in3: endpoint {
					status = "okay";
					vc-id = <1>;
					port-index = <2>;
					bus-width = <CAM_LANES>;
					remote-endpoint = <&imx390_csi_out3>;
				};
			};
		};
	}; /* End of capture_vi_base */

	host1x@13e00000 {
		nvcsi@15a00000 {
			num-channels = <4>; /* total cameras of EAC-2000 */
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";

 			channel@0 {
				reg = <0>;
				status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						status = "okay";
						imx390_csi_in0: endpoint@0 {
							status = "okay";
							port-index = <0>;
							bus-width = <CAM_LANES>;
							remote-endpoint = <&imx390_out0>;
						};
					};
					port@1 {
						reg = <1>;
						status = "okay";
						imx390_csi_out0: endpoint@1 {
							status = "okay";
							remote-endpoint = <&imx390_vi_in0>;
						};
					};
				};
			};
                        channel@1 {
				reg = <1>;
				status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						status = "okay";
						imx390_csi_in1: endpoint@2 {
							status = "okay";
							port-index = <0>;
							bus-width = <CAM_LANES>;
							remote-endpoint = <&imx390_out1>;
						};
					};
					port@1 {
						reg = <1>;
						status = "okay";
						imx390_csi_out1: endpoint@3 {
							status = "okay";
							remote-endpoint = <&imx390_vi_in1>;
						};
					};
				};
			};
			channel@2 {
				reg = <2>;
				status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						status = "okay";
						imx390_csi_in2: endpoint@4 {
							status = "okay";
							port-index = <2>;
							bus-width = <CAM_LANES>;
							remote-endpoint = <&imx390_out2>;
						};
					};
					port@1 {
						reg = <1>;
						status = "okay";
						imx390_csi_out2: endpoint@5 {
							status = "okay";
							remote-endpoint = <&imx390_vi_in2>;
						};
					};
				};
			};
			channel@3 {
				reg = <3>;
				status = "okay";
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					port@0 {
						reg = <0>;
						status = "okay";
						imx390_csi_in3: endpoint@6 {
							status = "okay";
							port-index = <2>;
							bus-width = <CAM_LANES>;
							remote-endpoint = <&imx390_out3>;
						};
					};
					port@1 {
						reg = <1>;
						status = "okay";
						imx390_csi_out3: endpoint@7 {
							status = "okay";
							remote-endpoint = <&imx390_vi_in3>;
						};
					};
				};
			};
		}; /* End of nvcsi@15a00000 */
	}; /* End of host1x@13e00000 */

	fixed-regulators {
		p3509_vdd_1v8_cvb: regulator@102 {
			regulator-always-on;
		};
	};

	/* i2c-2 - 3180000 */
	i2c@3180000 {
		status = "okay";
		#address-cells = <1>;
		#size-cells = <0>;

		/* I2C MUX IC */
		tca9543@72 {
			status = "okay";
			compatible = "nxp,pca9543";
			reg = <0x72>;
			#address-cells = <1>;
			#size-cells = <0>;
			skip_mux_detect = "yes";
			vif-supply = <&p3509_vdd_1v8_cvb>;
			vcc-supply = <&p3509_vdd_1v8_cvb>;
			force_bus_start = <0x1e>;
			i2c-mux-idle-disconnect;

			/* IC MAX9296 (U6) */
			i2c@0 {
				reg = <0>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;
				status = "okay";

				/*
				 * Setting for otocam
				 */
				dser: max9296@48 {
					compatible = "maxim,max9296";
					streams = "yuv8";
					reg = <0x48>;
					csi-mode = "2x4";
					max-src = <2>;
					fsync-gpio = <6>; // fsync gpio on MAX9296
				};
				ser_prim: max9295_prim@62 {
					compatible = "maxim,max9295";
					reg = <0x62>;
					is-prim-ser;
				};
				ser_a: max9295_a@40 {
					compatible = "maxim,max9295";
					reg = <0x40>;
					nvidia,gmsl-dser-device = <&dser>;
				};
				ser_b: max9295_b@60 {
					compatible = "maxim,max9295";
					reg = <0x60>;
					nvidia,gmsl-dser-device = <&dser>;
				};
				cam_0: imx390@10 {
					reg = <0x10>;
					reg_mux = <0>;
					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						 <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
					clock-names = "extperiph1", "pllp_grtba";
					mclk = "extperiph1";
					nvidia,gmsl-ser-device = <&ser_a>;
					nvidia,gmsl-dser-device = <&dser>;

					compatible = "sony,imx390","nvidia,imx390isp";
					def-addr = <0x6d>;

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model ="imx390isp";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					post_crop_frame_drop = "0";

					/* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
					//use_decibel_gain = "true";    // FIX:?

					/* enable CID_SENSOR_MODE_ID for sensor modes selection */
					use_sensor_mode_id = "true";

					mode0 {
						mclk_khz = "24000";
						tegra_sinterface = "serial_a";
						vc_id = "0";
						num_lanes = "4";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						csi_pixel_bit_depth = "16";
						mode_type = "yuv";
						pixel_phase = "uyvy";

						active_w = "1920";
						active_h = "1080";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						pix_clk_hz =    "374000000";

						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							imx390_out0: endpoint {
								vc-id = <0>;
								port-index = <0>;
								bus-width = <4>;
								remote-endpoint = <&imx390_csi_in0>;
							};
						};
					};
					gmsl-link {
						src-csi-port = "b";
						dst-csi-port = "a";
						serdes-csi-link = "a";
						csi-mode = "1x4";
						st-vc = <0>;
						vc-id = <0>;
						num-lanes = <4>;
						streams = "ued-u1","yuv8";
					};
				}; /* End of cam_0 */

				cam_1: imx390@11 {
					reg = <0x11>;
					reg_mux = <1>;
					/* Define any required hw resources needed by driver */
					/* ie. clocks, io pins, power sources */
					clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						 <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
					clock-names = "extperiph1", "pllp_grtba";
					mclk = "extperiph1";
					nvidia,gmsl-ser-device = <&ser_b>;
					nvidia,gmsl-dser-device = <&dser>;

					compatible = "sony,imx390","nvidia,imx390isp";
					def-addr = <0x6d>;

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model ="imx390isp";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					post_crop_frame_drop = "0";

					/* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
					//use_decibel_gain = "true";    // FIX:?

					/* enable CID_SENSOR_MODE_ID for sensor modes selection */
					use_sensor_mode_id = "true";

					mode0 {
						mclk_khz = "24000";
						tegra_sinterface = "serial_a";
						vc_id = "1";
						num_lanes = "4";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						csi_pixel_bit_depth = "16";
						mode_type = "yuv";
						pixel_phase = "uyvy";

						active_w = "1920";
						active_h = "1080";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						pix_clk_hz = "374000000";

						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							imx390_out1: endpoint {
								vc-id = <1>;
								port-index = <0>;
								bus-width = <4>;
								remote-endpoint = <&imx390_csi_in1>;
							};
						};
					};
					gmsl-link {
						src-csi-port = "b";
						dst-csi-port = "a";
						serdes-csi-link = "b";
						csi-mode = "1x4";
						st-vc = <0>;
						vc-id = <1>;
						num-lanes = <4>;
						streams = "ued-u1","yuv8";
					};
				}; /* End of cam_1 */
			}; /* End of i2c@0 */

			/* IC MAX9296 (U7) */
			i2c@1 {
				reg = <1>;
				i2c-mux,deselect-on-exit;
				#address-cells = <1>;
				#size-cells = <0>;
				status = "okay";

				/*
				 * Setting for otocam
				 */
				dsera: max9296@48 {
					compatible = "maxim,max9296";
					streams = "yuv8";
					reg = <0x48>;
					csi-mode = "2x4";
					max-src = <2>;
					fsync-gpio = <6>; // fsync gpio on MAX9296
				};
				ser_prima: max9295_prim@62 {
					compatible = "maxim,max9295";
					reg = <0x62>;
					is-prim-ser;
				};
				ser_c: max9295_a@40 {
					compatible = "maxim,max9295";
					reg = <0x40>;
					nvidia,gmsl-dser-device = <&dsera>;
				};
				ser_d: max9295_b@60 {
					compatible = "maxim,max9295";
					reg = <0x60>;
					nvidia,gmsl-dser-device = <&dsera>;
				};
				cam_2: imx390@12 {
					reg = <0x12>;
					reg_mux = <2>;
					clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						 <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
					clock-names = "extperiph1", "pllp_grtba";
					mclk = "extperiph1";
					nvidia,gmsl-ser-device = <&ser_c>;
					nvidia,gmsl-dser-device = <&dsera>;

					compatible = "sony,imx390","nvidia,imx390isp";
					def-addr = <0x6d>;

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model ="imx390isp";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					post_crop_frame_drop = "0";

					/* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
					//use_decibel_gain = "true";    // FIX:?

					/* enable CID_SENSOR_MODE_ID for sensor modes selection */
					use_sensor_mode_id = "true";

					mode0 {
						tegra_sinterface = "serial_c";
						vc_id = "0";
						mclk_khz = "24000";
						num_lanes = "4";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						csi_pixel_bit_depth = "16";
						mode_type = "yuv";
						pixel_phase = "uyvy";

						active_w = "1920";
						active_h = "1080";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						pix_clk_hz = "374000000";

						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							imx390_out2: endpoint {
								vc-id = <0>;
								port-index = <2>;
								bus-width = <4>;
								remote-endpoint = <&imx390_csi_in2>;
							};
						};
					};
					gmsl-link {
						src-csi-port = "b";
						dst-csi-port = "a";
						serdes-csi-link = "a";
						csi-mode = "1x4";
						st-vc = <0>;
						vc-id = <0>;
						num-lanes = <4>;
						streams = "yuv8","ued-u1";
					};
				};/* End of cam_2 */

				cam_3: imx390@13 {
					reg = <0x13>;
					reg_mux = <3>;
					clocks = <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>,
						 <&bpmp_clks TEGRA194_CLK_EXTPERIPH1>;
					clock-names = "extperiph1", "pllp_grtba";
					mclk = "extperiph1";
					nvidia,gmsl-ser-device = <&ser_d>;
					nvidia,gmsl-dser-device = <&dsera>;

					compatible = "sony,imx390","nvidia,imx390isp";
					def-addr = <0x6d>;

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model ="imx390isp";

					/* Defines number of frames to be dropped by driver internally after applying */
					/* sensor crop settings. Some sensors send corrupt frames after applying */
					/* crop co-ordinates */
					post_crop_frame_drop = "0";

					/* Convert Gain to unit of dB (decibel) befor passing to kernel driver */
					//use_decibel_gain = "true";    // FIX:?

					/* enable CID_SENSOR_MODE_ID for sensor modes selection */
					use_sensor_mode_id = "true";

					mode0 {
						tegra_sinterface = "serial_c";
						vc_id = "1";
						mclk_khz = "24000";
						num_lanes = "4";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";
						csi_pixel_bit_depth = "16";
						mode_type = "yuv";
						pixel_phase = "uyvy";

						active_w = "1920";
						active_h = "1080";
						readout_orientation = "0";
						line_length = "2200";
						inherent_gain = "1";
						pix_clk_hz = "374000000";

						gain_factor = "10";
						min_gain_val = "0"; /* dB */
						max_gain_val = "300"; /* dB */
						step_gain_val = "3"; /* 0.3 */
						default_gain = "0";
						min_hdr_ratio = "1";
						max_hdr_ratio = "1";
						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";
						exposure_factor = "1000000";
						min_exp_time = "59"; /*us, 2 lines*/
						max_exp_time = "33333";
						step_exp_time = "1";
						default_exp_time = "33333";/* us */
						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							imx390_out3: endpoint {
								vc-id = <1>;
								port-index = <2>;
								bus-width = <4>;
								remote-endpoint = <&imx390_csi_in3>;
							};
						};
					};
					gmsl-link {
						src-csi-port = "b";
						dst-csi-port = "a";
						serdes-csi-link = "b";
						csi-mode = "1x4";
						st-vc = <0>;
						vc-id = <1>;
						num-lanes = <4>;
						streams = "yuv8","ued-u1";
					};
                                }; /* End of cam_3 */
			}; /* End of i2c@1 */

		}; /* End of tca9548@72 */
	}; /* End of i2c@3180000 */
};


/ {
	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		 * Physical settings to calculate max ISO BW
		 *
		 * num_csi_lanes = <>;
		 * Total number of CSI lanes when all cameras are active
		 *
		 * max_lane_speed = <>;
		 * Max lane speed in Kbit/s
		 *
		 * min_bits_per_pixel = <>;
		 * Min bits per pixel
		 *
		 * vi_peak_byte_per_pixel = <>;
		 * Max byte per pixel for the VI ISO case
		 *
		 * vi_bw_margin_pct = <>;
		 * Vi bandwidth margin in percentage
		 *
		 * max_pixel_rate = <>;
		 * Max pixel rate in Kpixel/s for the ISP ISO case
		 *
		 * isp_peak_byte_per_pixel = <>;
		 * Max byte per pixel for the ISP ISO case
		 *
		 * isp_bw_margin_pct = <>;
		 * Isp bandwidth margin in percentage
		 */
		num_csi_lanes = <4>; /* total cameras of EAC-2000 */
		max_lane_speed = <2500000>;
		min_bits_per_pixel = <16>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <67>;
		max_pixel_rate = <750000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vender.
		 */
		modules {
			module0 {
				badge = "imx390_rear";
				position = "rear";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 30-001b";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9543@72/i2c@0/imx390@10";
					status = "okay";
				};
			};
			module1 {
				badge = "imx390_front";
				position = "front";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 30-001c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9543@72/i2c@0/imx390@11";
					status = "okay";
				};
			};
			module2 {
				badge = "imx390_left";
				position = "topright";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 31-001b";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9543@72/i2c@1/imx390@12";
					status = "okay";
				};
			};
			module3 {
				badge = "imx390_right";
				position = "bottomright";
				orientation = "1";
				drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "imx390 31-001c";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9543@72/i2c@1/imx390@13";
					status = "okay";
				};
			};
		};
	}; /* End of tcp: tegra-camera-platform */
};
